use e12117

#Problem 01
select first_name from employees order by first_name;

/* 
 * Excution time without indexing
 * 300024 total, Query took 0.9359 sec
 */

#Problem 02
create index fname_index on e12117.employees(first_name);
select first_name from employees order by first_name;

/* 
 * Excution time without indexing
 * 300024 total, Query took 0.0417 sec
 * reduce time by 0.8942 sec
 * good improvement
 */

#Problem 03
/* 
 * The above created index is non-unique index because,
 * we use first_name of employees as the indexing attribute
 * There are so many same first names
 * so it is a non unique index
 */

#Problem 04
create unique index emp_index on e12117.employees(emp_no,first_name,last_name);
select emp_no,first_name,last_name
from employees;

/* 
 * Excution time without indexing
 * 300024 total, Query took 0.1012 sec
 * reduce time by 0.8347 sec
 * good improvemnet occured because of the unique indexing
 */

#Problem 05
#Part i
create index frmDt on e12117.dept_manager(from_date);

/* 
 * All three quaries project emp_no attribute as it is primary key indexing is not done manually
 * We have only 9 departments, so dont need index in there
 * So decided to get the from_date attribute to have good indexing
 */

#Part ii
##Query A
EXPLAIN EXTENDED select distinct emp_no from dept_manager where from_date>='1985-01-01' and dept_no >= 'd005';

/* 
 * Result Set
 **
 ** +----+-------------+--------------+-------+----------------------+--------+---------+------+------+----------+-------------+
 ** | id | select_type | table        | type  | possible_keys        | key    | key_len | ref  | rows | filtered | Extra       |
 ** +----+-------------+--------------+-------+----------------------+--------+---------+------+------+----------+-------------+
 ** |  1 | SIMPLE      | dept_manager | index | dept_no,emp_no,frmDt | emp_no | 4       | NULL |   24 |    58.33 | Using where |
 ** +----+-------------+--------------+-------+----------------------+--------+---------+------+------+----------+-------------+
 ** 1 row in set, 1 warning (0.39 sec)
 **
 * Acccording to the result set this query has been used frmDt index
 */

##Query B
EXPLAIN EXTENDED select distinct emp_no from dept_manager where from_date>= '1996-01-03' and dept_no >= 'd005';

/* Result set
 **
 ** +----+-------------+--------------+-------+----------------------+-------+---------+------+------+----------+-----------------------------------------------------+
 ** | id | select_type | table        | type  | possible_keys        | key   | key_len | ref  | rows | filtered | Extra                                               |
 ** +----+-------------+--------------+-------+----------------------+-------+---------+------+------+----------+-----------------------------------------------------+
 ** |  1 | SIMPLE      | dept_manager | range | dept_no,emp_No,frmDt | frmDt | 3       | NULL |    2 |   100.00 | Using index condition; Using where; Using temporary |
 ** +----+-------------+--------------+-------+----------------------+-------+---------+------+------+----------+-----------------------------------------------------+
 ** 1 row in set, 1 warning (0.00 sec)
 ** 
 * According to the result set this query also used the frmDt index and it used it as the key here
 */

##Query C
EXPLAIN EXTENDED select distinct emp_no from dept_manager where from_date>='1985-01-01' and dept_no <= 'd009';

/* Result set
 **
 ** +----+-------------+--------------+-------+----------------------+--------+---------+------+------+----------+-------------+
 ** | id | select_type | table        | type  | possible_keys        | key    | key_len | ref  | rows | filtered | Extra       |
 ** +----+-------------+--------------+-------+----------------------+--------+---------+------+------+----------+-------------+
 ** |  1 | SIMPLE      | dept_manager | index | dept_no,emp_no,frmDt | emp_no | 4       | NULL |   24 |   100.00 | Using where |
 ** +----+-------------+--------------+-------+----------------------+--------+---------+------+------+----------+-------------+
 ** 1 row in set, 1 warning (0.00 sec)
 ** 
 * According to the result set this query also used the frmDt index
 */

 /* 
  * We can see that all the queries used the implemented indexing.
  * So we can consider it as a good index
  */

#Problem 06
#Part 2

/*
 * We only uses the last_name attribute in this part. Therefore index on 
 * this attribute is enough.
 */

#Part 3

/*
 * As we select engineers with the use of title attribut, indexing on 
 * title attribute is better
 */

#Part 4

/*
 * We select the former senior engineers who now are managers, 
 * So it is better to have index on titiles. And also we compare dates,
 * So if we can have index from from_date attribute in manager table is good too.
 */

#part 5

/*
 * Require data on salaries.
 * So index on salary attribute is the proper one.
 */

#Part 6

/* 
 * We need age, So it is better to use index on 
 * birth_date attribute
 */

#Part 7

/*
 * As we looking for department name, it is better to use
 * indexing on dept_name attribute.
 */

#Part 8

/*
 * we need to look for salary. So it is better
 * to have indexing on salary attribute.
 */

#Part 9

/*
 * We need to have salary again. So indexing
 * on salary is better to have.
 */

#Part 10

/* 
 * Index on salary and title is better to have
 * As we are using average salary and the senior engineers to
 * excute the query
 */

#Problem 07
#Insert

/* 
 * Insertion time is increasing after we had indexing before the insertion should
 * insert to the indexing. 
 * This is a simple example before,after have indexing on first_name
 * 
 * INSERT INTO employees(emp_no, birth_date, first_name, last_name, sex, hire_date) VALUES (4444444,'1980-01-23','Nimal','Perera','M','1995-03-01');
 * Query OK, 1 row affected (0.10 sec)
 * 
 * INSERT INTO employees(emp_no, birth_date, first_name, last_name, sex, hire_date) VALUES (4444444,'1980-01-23','Nimal','Perera','M','1995-03-01');
 * Query OK, 1 row affected (0.14 sec)
 */

#Update

/*
 * Updating time is decreased if we had indexing. 
 * We can find the requried attribute very easily.
 * This is a simple example before,after have indexing on first_name
 *
 * UPDATE employees SET first_name='Kamal' where emp_no = 4444444;
 * Query OK, 1 row affected (0.15 sec)
 * Rows matched: 1  Changed: 1  Warnings: 0
 * 
 * UPDATE employees SET first_name='Kamal' where emp_no = 4444444;
 * Query OK, 1 row affected (0.10 sec)
 * Rows matched: 1  Changed: 1  Warnings: 0
 *
 */

#Delete

/*
 * Deleting is also take time if we have index because the entries
 * that delete should be remove from indexing.
 * This is a simple example before,after have indexing on first_name
 *
 * DELETE FROM employees WHERE emp_no=4444444;
 * Query OK, 1 row affected (0.25 sec)
 *
 * DELETE FROM employees WHERE emp_no=4444444;
 * Query OK, 1 row affected (0.28 sec)
 */